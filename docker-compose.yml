version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: newsrss-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=newsrss
      - POSTGRES_USER=newsrss
      - POSTGRES_PASSWORD=newsrss_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - newsrss-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newsrss -d newsrss"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache/Queue
  redis:
    image: redis:8-alpine
    container_name: newsrss-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - newsrss-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chrome Container for advanced scraping
  chrome:
    image: gcr.io/zenika-hub/alpine-chrome:124
    container_name: newsrss-chrome
    restart: unless-stopped
    command:
      - --no-sandbox
      - --disable-gpu
      - --disable-dev-shm-usage
      - --remote-debugging-address=0.0.0.0
      - --remote-debugging-port=9222
      - --hide-scrollbars
    ports:
      - "9222:9222"
    networks:
      - newsrss-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9222/json/version", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RSS Main Process (Feed monitoring and job creation)
  newsrss-main:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: newsrss-rss-main
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - SERVICE_NAME=RSS_MAIN
      - DATABASE_URL=postgresql://newsrss:newsrss_password@postgres:5432/newsrss
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=newsrss
      - POSTGRES_USER=newsrss
      - POSTGRES_PASSWORD=newsrss_password
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - newsrss-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('RSS Main Process Health Check OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RSS Worker Process (Article processing and AI summarization)
  newsrss-worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: newsrss-rss-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - SERVICE_NAME=RSS_WORKER
      - DATABASE_URL=postgresql://newsrss:newsrss_password@postgres:5432/newsrss
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=newsrss
      - POSTGRES_USER=newsrss
      - POSTGRES_PASSWORD=newsrss_password
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - newsrss-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('RSS Worker Process Health Check OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2  # Scale workers as needed

  # AI Search Service (Independent AI news search)
  newsrss-ai-search:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: newsrss-ai-search
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - SERVICE_NAME=AI_SEARCH
      - DATABASE_URL=postgresql://newsrss:newsrss_password@postgres:5432/newsrss
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=newsrss
      - POSTGRES_USER=newsrss
      - POSTGRES_PASSWORD=newsrss_password
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - newsrss-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('AI Search Service Health Check OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  newsrss-network:
    driver: bridge 